# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  
steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: Bash@3
  displayName: Print Relevant Variables Values
  inputs:
     targetType: 'inline'
     script: |
       echo "System.Debug=$(System.Debug)"
       echo "Build.Repository.LocalPath=$(Build.Repository.LocalPath)"
  #displayName: Print Variables of imported Variable Groups
  #name: PrintVariableGroupsVariables
  #inputs:
  #    targetType: 'inline'
  #    script: |
  #      echo "System.Debug=$(System.Debug)"
  #      echo "KeyStoreAlias=$(KeyStoreAlias)"
  #      echo "SonarCloudOrganization=$(SonarCloudOrganization)"
  #      echo "SonarCloudProjectKey=$(SonarCloudProjectKey)"
  #      echo "SonarCloudProjectName=$(SonarCloudProjectName)"

- task: NuGetCommand@2
  displayName: 'restore NuGet packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.sln'
  

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish $(buildConfiguration)'
  inputs:
    command: 'publish'
    arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)'
    projects: 'WebApp-01/WebApp-01.csproj'
    #arguments: '--configuration $(buildConfiguration) --no-build'
    # zipAfterPublish: true => this is the default and it is important to the PublishPipelineArtifact@1 that follows

# you need to copy the files azuredeploy*.json first because 
# PublishPipelineArtifact@1 cannot use wildcards while 
# CopyFiles@2 can
- task: CopyFiles@2  
  displayName: 'copy files azuredeploy*.json'
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)/ArmTemplates/bin/Release/'
    contents: 'azuredeploy*.json'
    targetFolder: '$(Pipeline.Workspace)/temparmtemplates/'

- task: PublishPipelineArtifact@1
  displayName: 'publish artifacts arm templates'
  inputs:
    targetPath: '$(Pipeline.Workspace)/temparmtemplates/'
    artifact: 'armtemplates'
    publishLocation: 'pipeline'
  
# mind that PublishPipelineArtifact@1 telies on the output of a previous 
# DotNetCoreCLI@2 step used to invoke the publish command for the *.csproj
# and this taks has a zipAfterPublish [true] param that causes the publish 
# folder to be zipped by default. This is different from what habbens in VS
# REF: https://intellitect.com/blog/missing-publish-directory/
- task: PublishPipelineArtifact@1
  displayName: 'publish artifacts webapp-01'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/publish.zip'
    #targetPath: '$(Pipeline.Workspace)/s/WebApp-01/bin/Release/net6.0/publish.zip'
    artifact: 'webapp01'
    publishLocation: 'pipeline'
  

